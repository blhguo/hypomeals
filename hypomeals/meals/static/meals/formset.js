/**
 * Registers a formset on a <form> element. Specifically, it does these things:
 * * Initialize current index of rows by checking the form-TOTAL_FORMS input
 * * Clones the last row as a template for creating new rows
 * * Hides all "Delete" checkboxes, and registers delete buttons
 * * Registers the "Add row" button to create a new row.
 *
 * For an example, checkout `edit_goal.html`.
 *
 * Notes:
 * * The form is expected to be laid out in a table.
 * * The table should contain the Django-generated "DELETE" input.
 * * The "DELETE" input generated by Django must be in the same table cell <td>
 *      element as the "Delete" button.
 * * There must be a templateRow (a <tr id="templateRow"> element) with the
 *      empty form.
 * @param form a <form> element to be converted to a formset
 * @param prefix the prefix of the formset. If not provided or null, this will
 *      be "form".
 * @param addButton an "Add row" button to use. If not provided, it will try
 *      to look for a button with ID "#addRowButton". If not found, an alert
 *      will be displayed.
 * @param addCallback a callback to be called when a row is added
 * @param deleteCallback a callback to be called when a row is deleted
 * @return {boolean} true iff the formset is correctly initialized.
 */
function registerFormset(form, addButton, addCallback, deleteCallback, prefix) {
    if (!prefix) {
        prefix = "form";
    }
    if (!addButton) {
        addButton = $("#addRowButton");
        if (addButton.length === 0) {
            alert("Cannot find Add Row button. Pass one in or " +
                "set a button's ID to '#addRowButton'");
            return false;
        }
    }
    addButton.on("click", addRow);
    form = $(form);

    let totalForms = form.find(`input[name=${prefix}-TOTAL_FORMS]`);
    let table = form.find("table tbody");
    if (table.length === 0) {
        alert("Form does not contain a table.");
        return false;
    }
    let rows = table.find("tr");
    rows.each(function (i, row) {
        $(row).toggle(!$(row).find("input[name*=DELETE]").attr("checked"));
    });

    let index = Number(totalForms.val());

    let tr = $("#templateRow");
    if (tr.length === 0) {
        alert("Template row not found. Make sure you have rendered an empty form " +
            "in <tr> tags.");
        return false;
    }

    let templateRow = tr[0].cloneNode(true);
    tr.toggle(false);


    function addRow() {
        let newRow = $(templateRow.cloneNode(true));
        newRow.find("input").each(function (i, input) {
            input.name = input.name
                .replace(/-(\d+|__prefix__)-/, `-${index}-`);
        });
        newRow.find("input[name*=DELETE]").toggle(false);

        let deleteButton = newRow.find(".deleteButtons");
        deleteButton.on("click", deleteRow);
        newRow.appendTo(table);
        if (_.isFunction(addCallback)) {
            addCallback(newRow);
        }
        index += 1;
        totalForms.val(index);
        form.trigger("formset:changed");
    }

    function deleteRow() {
        let row = $(this)
            .parents("td")
            .find("input[name*=DELETE]")
            .attr("checked", true)
            .parents("tr")
            .toggle(false);
        if (_.isFunction(deleteCallback)) {
            deleteCallback(row);
        }
        form.trigger("formset:changed");
    }

    let deleteButtons = table.find(".deleteButtons");
    if (deleteButtons.length === 0) {
            alert("No delete button was found in table. " +
                "Delete buttons should belong to class '.deleteButtons'");
            return false;
        }
        deleteButtons.on("click", deleteRow);

    table.find("input[name*=DELETE]").toggle(false);

    return true;
}