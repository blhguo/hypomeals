# Generated by Django 2.1.5 on 2019-02-13 07:44

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import meals.utils
import meals.validators


class Migration(migrations.Migration):

    dependencies = [
        ('meals', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Formula',
            fields=[
                ('name', models.CharField(max_length=32, verbose_name='Name')),
                ('number', models.IntegerField(primary_key=True, serialize=False, unique=True, verbose_name='Formula#')),
                ('comment', models.CharField(max_length=4000, verbose_name='Comment')),
            ],
            options={
                'ordering': ['pk'],
            },
            bases=(models.Model, meals.utils.ModelFieldsCompareMixin, meals.utils.AttributeResolutionMixin),
        ),
        migrations.CreateModel(
            name='FormulaIngredient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.FloatField()),
                ('formula', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='meals.Formula', verbose_name='SKU#')),
            ],
            bases=(models.Model, meals.utils.ModelFieldsCompareMixin, meals.utils.AttributeResolutionMixin),
        ),
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('save_time', models.DateTimeField(blank=True, default=django.utils.timezone.now)),
                ('deadline', models.DateField(verbose_name='Deadline')),
                ('file', models.FileField(upload_to=meals.utils.UploadToPathAndRename('pk', 'manufacturing_goal/'), blank=True)),
            ],
            options={
                'ordering': ['pk'],
            },
            bases=(models.Model, meals.utils.ModelFieldsCompareMixin, meals.utils.AttributeResolutionMixin),
        ),
        migrations.CreateModel(
            name='GoalItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.DecimalField(decimal_places=6, max_digits=12, validators=[django.core.validators.MinValueValidator(limit_value=1e-06, message='Quantity must be positive')], verbose_name='Quantity')),
                ('goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='details', related_query_name='detail', to='meals.Goal', verbose_name='Goal')),
            ],
            bases=(models.Model, meals.utils.ModelFieldsCompareMixin, meals.utils.AttributeResolutionMixin),
        ),
        migrations.CreateModel(
            name='Ingredient',
            fields=[
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('number', models.CharField(max_length=100, primary_key=True, serialize=False, validators=[meals.validators.validate_alphanumeric], verbose_name='Ingr#')),
                ('size', models.DecimalField(decimal_places=6, max_digits=12, max_length=100, validators=[django.core.validators.MinValueValidator(limit_value=1e-06, message='Size of ingredient must be positive.')], verbose_name='Size')),
                ('cost', models.FloatField(verbose_name='Cost')),
                ('comment', models.CharField(blank=True, max_length=4000, verbose_name='Comment')),
            ],
            options={
                'ordering': ['number'],
            },
            bases=(models.Model, meals.utils.ModelFieldsCompareMixin, meals.utils.AttributeResolutionMixin),
        ),
        migrations.CreateModel(
            name='ManufacturingLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, verbose_name='Name')),
                ('shortname', models.CharField(help_text='A short name to quickly identify a manufacturing line. E.g., "BMP1"', max_length=5, unique=True, verbose_name='Short Name')),
                ('comment', models.CharField(max_length=4000, verbose_name='Comment')),
            ],
            options={
                'ordering': ['shortname'],
            },
            bases=(models.Model, meals.utils.ModelFieldsCompareMixin, meals.utils.AttributeResolutionMixin),
        ),
        migrations.CreateModel(
            name='ProductLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
            ],
            options={
                'ordering': ['pk'],
            },
            bases=(models.Model, meals.utils.ModelFieldsCompareMixin),
        ),
        migrations.CreateModel(
            name='Sku',
            fields=[
                ('name', models.CharField(max_length=32, verbose_name='Name')),
                ('number', models.IntegerField(primary_key=True, serialize=False, unique=True, verbose_name='SKU#')),
                ('unit_size', models.CharField(max_length=100, verbose_name='Unit size')),
                ('count', models.IntegerField(help_text='Number of units per case', validators=[django.core.validators.MinValueValidator(limit_value=0)], verbose_name='Count per case')),
                ('formula_scale', models.DecimalField(decimal_places=6, default=1.0, max_digits=12, validators=[django.core.validators.MinValueValidator(limit_value=1e-06, message='The formula scale factor must be positive.')], verbose_name='Formula Scale Factor')),
                ('comment', models.CharField(blank=True, max_length=4000, verbose_name='Comment')),
            ],
            options={
                'ordering': ['number'],
            },
            bases=(models.Model, meals.utils.ModelFieldsCompareMixin, meals.utils.AttributeResolutionMixin),
        ),
        migrations.CreateModel(
            name='SkuManufacturingLine',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate', models.DecimalField(decimal_places=6, default=1.0, max_digits=12, validators=[django.core.validators.MinValueValidator(limit_value=1e-06, message='The manufacturing rate must be positive')], verbose_name='Manufacturing Rate')),
                ('manufacturing_line', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='skus', related_query_name='sku', to='meals.ManufacturingLine')),
                ('sku', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_query_name='manufacturing_line', to='meals.Sku')),
            ],
            bases=(models.Model, meals.utils.ModelFieldsCompareMixin, meals.utils.AttributeResolutionMixin),
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('symbol', models.CharField(max_length=10)),
                ('verbose_name', models.CharField(blank=True, max_length=20)),
                ('scale_factor', models.DecimalField(decimal_places=6, max_digits=12)),
                ('is_base', models.BooleanField(default=False)),
                ('unit_type', models.CharField(choices=[('mass', 'Mass-based'), ('volume', 'Volume-based'), ('count', 'Count-based')], default='count', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Upc',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('upc_number', models.CharField(max_length=12, unique=True)),
            ],
            options={
                'ordering': ['pk'],
            },
            bases=(models.Model, meals.utils.ModelFieldsCompareMixin),
        ),
        migrations.CreateModel(
            name='Vendor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('info', models.CharField(max_length=4000, verbose_name='Info')),
            ],
            options={
                'ordering': ['pk'],
            },
            bases=(models.Model, meals.utils.ModelFieldsCompareMixin),
        ),
        migrations.AddField(
            model_name='user',
            name='netid',
            field=models.CharField(blank=True, default=None, max_length=10, null=True, unique=True, validators=[meals.validators.validate_netid], verbose_name='NetID'),
        ),
        migrations.AddField(
            model_name='sku',
            name='case_upc',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='meals.Upc', verbose_name='Case UPC#'),
        ),
        migrations.AddField(
            model_name='sku',
            name='formula',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='skus', related_query_name='sku', to='meals.Formula', verbose_name='Formulas'),
        ),
        migrations.AddField(
            model_name='sku',
            name='manufacturing_lines',
            field=models.ManyToManyField(through='meals.SkuManufacturingLine', to='meals.ManufacturingLine', verbose_name='Manufacturing Lines'),
        ),
        migrations.AddField(
            model_name='sku',
            name='product_line',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='meals.ProductLine', verbose_name='Product Line'),
        ),
        migrations.AddField(
            model_name='sku',
            name='unit_upc',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='meals.Upc', verbose_name='Unit UPC#'),
        ),
        migrations.AddField(
            model_name='ingredient',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='ingredients', related_query_name='ingredient', to='meals.Unit'),
        ),
        migrations.AddField(
            model_name='ingredient',
            name='vendor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='meals.Vendor', verbose_name='Vendor'),
        ),
        migrations.AddField(
            model_name='goalitem',
            name='sku',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='meals.Sku', verbose_name='SKU'),
        ),
        migrations.AddField(
            model_name='goal',
            name='user',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, related_name='goals', related_query_name='goal', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='formulaingredient',
            name='ingredient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='formulas', related_query_name='formula', to='meals.Ingredient', verbose_name='Ingr#'),
        ),
        migrations.AddField(
            model_name='formula',
            name='ingredients',
            field=models.ManyToManyField(through='meals.FormulaIngredient', to='meals.Ingredient', verbose_name='Ingredients'),
        ),
        migrations.AlterUniqueTogether(
            name='skumanufacturingline',
            unique_together={('sku', 'manufacturing_line')},
        ),
        migrations.AlterUniqueTogether(
            name='goalitem',
            unique_together={('goal', 'sku')},
        ),
        migrations.AlterUniqueTogether(
            name='goal',
            unique_together={('user', 'name', 'save_time')},
        ),
        migrations.AlterUniqueTogether(
            name='formulaingredient',
            unique_together={('formula', 'ingredient')},
        ),
    ]
